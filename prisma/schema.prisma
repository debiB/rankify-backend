generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                        @id @default(cuid())
  email                        String                        @unique
  password                     String
  name                         String?
  role                         Role                          @default(USER)
  status                       Status                        @default(ACTIVE)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  hasChangedPassword           Boolean                       @default(false)
  adminNotificationPreferences AdminNotificationPreferences?
  campaigns                    Campaign[]
  campaignUsers                CampaignUser[]
  emailPreferences             UserCampaignEmailPreference[]
  userNotificationPreferences  UserNotificationPreferences?
  favorites                    UserKeywordFavorite[]
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

model GoogleAccount {
  id           String     @id @default(cuid())
  email        String     @unique
  accountName  String
  accessToken  String     @db.Text
  refreshToken String     @db.Text
  expiresAt    DateTime
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  campaigns    Campaign[]
}

model Campaign {
  id                   String                        @id @default(cuid())
  name                 String
  startingDate         DateTime
  searchConsoleAccount String
  searchConsoleSite    String
  keywords             String                        @db.Text
  status               CampaignStatus                @default(ACTIVE)
  userId               String
  googleAccountId      String
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
  googleAccount        GoogleAccount                 @relation(fields: [googleAccountId], references: [id], onDelete: Cascade)
  user                 User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignUsers        CampaignUser[]
  campaignGroups       CampaignWhatsAppGroup[]
  milestonePreferences MilestonePreference[]
  sentMilestones       SentMilestone[]
  emailPreferences     UserCampaignEmailPreference[]
  cannibalizationAudits KeywordCannibalizationAudit[]

  @@index([googleAccountId], map: "Campaign_googleAccountId_fkey")
  @@index([userId], map: "Campaign_userId_fkey")
}

model SearchConsoleKeywordAnalytics {
  id        String                 @id @default(cuid())
  siteUrl   String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  keywords  SearchConsoleKeyword[]

  @@index([siteUrl])
}

model SearchConsoleKeyword {
  id              String                            @id @default(cuid())
  analyticsId     String
  keyword         String
  initialPosition Int
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt
  analytics       SearchConsoleKeywordAnalytics     @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  dailyStats      SearchConsoleKeywordDailyStat[]
  monthlyStats    SearchConsoleKeywordMonthlyStat[]
  sentMilestones  SentMilestone[]
  favorites       UserKeywordFavorite[]

  @@unique([analyticsId, keyword])
  @@index([keyword])
  @@index([analyticsId, keyword])
}

model SearchConsoleKeywordMonthlyStat {
  id                String               @id @default(cuid())
  keywordId         String
  month             Int
  year              Int
  averageRank       Float
  searchVolume      Int
  topRankingPageUrl String               @db.Text
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  keyword           SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, month, year])
  @@index([month, year])
}

model SearchConsoleKeywordDailyStat {
  id                String               @id @default(cuid())
  keywordId         String
  date              DateTime
  averageRank       Float?
  searchVolume      Int
  topRankingPageUrl String               @db.Text
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  keyword           SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, date])
  @@index([date])
}

// Traffic analytics models
model SearchConsoleTrafficAnalytics {
  id        String                        @id @default(cuid())
  siteUrl   String
  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt
  daily     SearchConsoleTrafficDaily[]
  monthly   SearchConsoleTrafficMonthly[]

  @@index([siteUrl])
}

model SearchConsoleTrafficMonthly {
  id          String                        @id @default(cuid())
  analyticsId String
  month       Int
  year        Int
  clicks      Int
  impressions Int
  createdAt   DateTime                      @default(now())
  updatedAt   DateTime                      @updatedAt
  ctr         Float
  position    Float
  analytics   SearchConsoleTrafficAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, month, year])
  @@index([month, year])
}

model SearchConsoleTrafficDaily {
  id          String                        @id @default(cuid())
  analyticsId String
  date        DateTime
  clicks      Int
  impressions Int
  createdAt   DateTime                      @default(now())
  updatedAt   DateTime                      @updatedAt
  ctr         Float
  position    Float
  analytics   SearchConsoleTrafficAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, date])
  @@index([date])
}

model AdminNotificationPreferences {
  id                     String   @id
  userId                 String   @unique
  enableEmail            Boolean  @default(true)
  enableWhatsApp         Boolean  @default(true)
  enableAllNotifications Boolean  @default(true)
  positionThresholds     String?  @db.Text
  clickThresholds        String?  @db.Text
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  campaignId             String?
  whatsAppGroupId        String?
  User                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CampaignUser {
  id          String   @id @default(cuid())
  campaignId  String
  userId      String
  role        CampaignUserRole @default(VIEWER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, userId])
}

enum CampaignUserRole {
  ADMIN
  VIEWER
}

model MilestoneType {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "position_1", "position_2", "position_3", "clicks_100", "clicks_500"
  displayName String   // e.g., "Position 1", "Position 2", "100 Clicks"
  description String?
  type        MilestoneCategory
  threshold   Int?     // For click milestones
  position    Int?     // For position milestones (1, 2, 3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  preferences   MilestonePreference[]
  sentMilestones SentMilestone[]
}

enum MilestoneCategory {
  POSITION
  CLICKS
}

model MilestonePreference {
  id              String   @id @default(cuid())
  campaignId      String
  milestoneTypeId String
  emailEnabled    Boolean  @default(true)
  whatsappEnabled Boolean  @default(true)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  campaign      Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  milestoneType MilestoneType @relation(fields: [milestoneTypeId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, milestoneTypeId])
}

model SentMilestone {
  id              String   @id @default(cuid())
  campaignId      String
  milestoneTypeId String
  keywordId       String?  // Optional: specific keyword that achieved the milestone
  achievedAt      DateTime // When the milestone was actually achieved
  sentAt          DateTime @default(now()) // When the notification was sent
  emailSent       Boolean  @default(false)
  whatsappSent    Boolean  @default(false)
  emailError      String?  @db.Text
  whatsappError   String?  @db.Text
  metricValue     Float?   // The actual position or click count achieved
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  campaign      Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  milestoneType MilestoneType @relation(fields: [milestoneTypeId], references: [id], onDelete: Cascade)
  keyword       SearchConsoleKeyword? @relation(fields: [keywordId], references: [id], onDelete: SetNull)
  
  @@index([campaignId, milestoneTypeId])
  @@index([achievedAt])
}

// User-Campaign email notification preferences
model UserCampaignEmailPreference {
  id          String   @id @default(cuid())
  userId      String
  campaignId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([userId, campaignId])
}

// Admin global notification preferences
model AdminNotificationPreferencesGlobal {
  id                    String   @id @default(cuid())
  userId                String   @unique // Admin user ID
  enableEmail           Boolean  @default(true)
  enableWhatsApp        Boolean  @default(true)
  enableAllNotifications Boolean @default(true)
  
  // Selected preferences
  whatsAppGroupId       String?  // Selected WhatsApp group ID
  campaignId            String?  // Selected campaign ID for email notifications
  
  // Global thresholds (JSON stored as string)
  positionThresholds    String?  @db.Text // JSON: [1, 2, 3]
  clickThresholds       String?  @db.Text // JSON: [100, 500, 1000]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserNotificationPreferences {
  id                     String   @id
  userId                 String   @unique
  enableEmail            Boolean  @default(true)
  enableWhatsApp         Boolean  @default(true)
  enableAllNotifications Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  User                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WhatsAppGroup {
  id          String   @id @default(cuid())
  groupId     String   @unique // WhatsApp group ID from Whapi API
  name        String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaignGroups CampaignWhatsAppGroup[]
}

model CampaignWhatsAppGroup {
  id          String   @id @default(cuid())
  campaignId  String
  groupId     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaign    Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  whatsAppGroup WhatsAppGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, groupId])
}

// Keyword cannibalization monitoring models
model KeywordCannibalizationAudit {
  id                   String                         @id @default(cuid())
  campaignId           String
  startDate            DateTime
  endDate              DateTime
  auditType            KeywordCannibalizationAuditType @default(CUSTOM)
  status               KeywordCannibalizationAuditStatus @default(PENDING)
  totalKeywords        Int?
  cannibalizationCount Int?
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt

  campaign Campaign                        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  results  KeywordCannibalizationResult[]

  @@index([campaignId])
  @@index([createdAt])
}

model KeywordCannibalizationResult {
  id                   String                   @id @default(cuid())
  auditId              String
  keyword              String
  topPageUrl           String                   @db.Text
  topPageImpressions   Int
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt

  audit          KeywordCannibalizationAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  competingPages KeywordCompetingPage[]

  @@index([auditId])
  @@index([keyword])
}

model KeywordCompetingPage {
  id                String                       @id @default(cuid())
  resultId          String
  pageUrl           String                       @db.Text
  impressions       Int
  overlapPercentage Float
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt

  result KeywordCannibalizationResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@index([resultId])
  @@index([overlapPercentage])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
}

enum KeywordCannibalizationAuditType {
  CUSTOM
  INITIAL
  SCHEDULED
}

enum KeywordCannibalizationAuditStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// User favorites for keywords
model UserKeywordFavorite {
  id         String @id @default(cuid())
  userId     String
  keywordId  String
  createdAt  DateTime @default(now())

  user    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  keyword SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([userId, keywordId])
  @@index([userId])
  @@index([keywordId])
}
