generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  name                  String?
  role                  Role     @default(USER)
  status                Status   @default(ACTIVE)
  hasChangedPassword    Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  campaigns             Campaign[]
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

model GoogleAccount {
  id          String   @id @default(cuid())
  email       String   @unique
  accountName String
  accessToken String   @db.Text
  refreshToken String  @db.Text
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaigns   Campaign[]
}

model Campaign {
  id                    String   @id @default(cuid())
  name                  String
  startingDate          DateTime
  searchConsoleAccount  String
  searchConsoleSite     String
  keywords              String   @db.Text
  status                CampaignStatus @default(ACTIVE)
  userId                String
  googleAccountId       String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  googleAccount         GoogleAccount @relation(fields: [googleAccountId], references: [id], onDelete: Cascade)
}

enum CampaignStatus {
  ACTIVE
  PAUSED
} 

// Keyword analytics models
model SearchConsoleKeywordAnalytics {
  id        String   @id @default(cuid())
  siteUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  keywords  SearchConsoleKeyword[]

  @@index([siteUrl])
}

model SearchConsoleKeyword {
  id              String   @id @default(cuid())
  analyticsId     String
  keyword         String
  initialPosition Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  analytics   SearchConsoleKeywordAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  monthlyStats SearchConsoleKeywordMonthlyStat[]
  dailyStats   SearchConsoleKeywordDailyStat[]

  @@index([keyword])
  @@index([analyticsId, keyword])
  @@unique([analyticsId, keyword])
}

model SearchConsoleKeywordMonthlyStat {
  id                 String   @id @default(cuid())
  keywordId          String
  month              Int
  year               Int
  averageRank        Float
  searchVolume       Int
  topRankingPageUrl  String   @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  keyword SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, month, year])
  @@index([month, year])
}

model SearchConsoleKeywordDailyStat {
  id                 String   @id @default(cuid())
  keywordId          String
  date               DateTime
  averageRank        Float?
  searchVolume       Int
  topRankingPageUrl  String   @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  keyword SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, date])
  @@index([date])
}

// Traffic analytics models
model SearchConsoleTrafficAnalytics {
  id        String   @id @default(cuid())
  siteUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monthly SearchConsoleTrafficMonthly[]
  daily   SearchConsoleTrafficDaily[]

  @@index([siteUrl])
}

model SearchConsoleTrafficMonthly {
  id          String   @id @default(cuid())
  analyticsId String
  month       Int
  year        Int
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  analytics SearchConsoleTrafficAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, month, year])
  @@index([month, year])
}

model SearchConsoleTrafficDaily {
  id          String   @id @default(cuid())
  analyticsId String
  date        DateTime
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  analytics SearchConsoleTrafficAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, date])
  @@index([date])
}