generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  name                  String?
  role                  Role     @default(USER)
  status                Status   @default(ACTIVE)
  hasChangedPassword    Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  campaigns             Campaign[]
  campaignUsers         CampaignUser[]
  emailPreferences      UserCampaignEmailPreference[]
  adminNotificationPreferences AdminNotificationPreferences?
  notificationPreferences UserNotificationPreferences?
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

model GoogleAccount {
  id          String   @id @default(cuid())
  email       String   @unique
  accountName String
  accessToken String   @db.Text
  refreshToken String  @db.Text
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaigns   Campaign[]
}

model Campaign {
  id                    String   @id @default(cuid())
  name                  String
  startingDate          DateTime
  searchConsoleAccount  String
  searchConsoleSite     String
  keywords              String   @db.Text
  status                CampaignStatus @default(ACTIVE)
  userId                String
  googleAccountId       String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  googleAccount         GoogleAccount @relation(fields: [googleAccountId], references: [id], onDelete: Cascade)
  campaignGroups        CampaignWhatsAppGroup[]
  campaignUsers         CampaignUser[]
  milestonePreferences  MilestonePreference[]
  sentMilestones        SentMilestone[]
  emailPreferences      UserCampaignEmailPreference[]
}

enum CampaignStatus {
  ACTIVE
  PAUSED
} 

// Keyword analytics models
model SearchConsoleKeywordAnalytics {
  id        String   @id @default(cuid())
  siteUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  keywords  SearchConsoleKeyword[]

  @@index([siteUrl])
}

model SearchConsoleKeyword {
  id              String   @id @default(cuid())
  analyticsId     String
  keyword         String
  initialPosition Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  analytics   SearchConsoleKeywordAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  monthlyStats SearchConsoleKeywordMonthlyStat[]
  dailyStats   SearchConsoleKeywordDailyStat[]
  sentMilestones SentMilestone[]

  @@index([keyword])
  @@index([analyticsId, keyword])
  @@unique([analyticsId, keyword])
}

model SearchConsoleKeywordMonthlyStat {
  id                 String   @id @default(cuid())
  keywordId          String
  month              Int
  year               Int
  averageRank        Float
  searchVolume       Int
  topRankingPageUrl  String   @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  keyword SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, month, year])
  @@index([month, year])
}

model SearchConsoleKeywordDailyStat {
  id                 String   @id @default(cuid())
  keywordId          String
  date               DateTime
  averageRank        Float?
  searchVolume       Int
  topRankingPageUrl  String   @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  keyword SearchConsoleKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, date])
  @@index([date])
}

// Traffic analytics models
model SearchConsoleTrafficAnalytics {
  id        String   @id @default(cuid())
  siteUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monthly SearchConsoleTrafficMonthly[]
  daily   SearchConsoleTrafficDaily[]

  @@index([siteUrl])
}

model SearchConsoleTrafficMonthly {
  id          String   @id @default(cuid())
  analyticsId String
  month       Int
  year        Int
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  analytics SearchConsoleTrafficAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, month, year])
  @@index([month, year])
}

model SearchConsoleTrafficDaily {
  id          String   @id @default(cuid())
  analyticsId String
  date        DateTime
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  analytics SearchConsoleTrafficAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, date])
  @@index([date])
}

// Milestone notification models
model WhatsAppGroup {
  id          String   @id @default(cuid())
  groupId     String   @unique // WhatsApp group ID from Whapi API
  name        String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaignGroups CampaignWhatsAppGroup[]
}

model CampaignWhatsAppGroup {
  id          String   @id @default(cuid())
  campaignId  String
  groupId     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaign    Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  whatsAppGroup WhatsAppGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, groupId])
}

model CampaignUser {
  id          String   @id @default(cuid())
  campaignId  String
  userId      String
  role        CampaignUserRole @default(VIEWER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, userId])
}

enum CampaignUserRole {
  ADMIN
  VIEWER
}

model MilestoneType {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "position_1", "position_2", "position_3", "clicks_100", "clicks_500"
  displayName String   // e.g., "Position 1", "Position 2", "100 Clicks"
  description String?
  type        MilestoneCategory
  threshold   Int?     // For click milestones
  position    Int?     // For position milestones (1, 2, 3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  preferences MilestonePreference[]
  sentMilestones SentMilestone[]
}

enum MilestoneCategory {
  POSITION
  CLICKS
}

model MilestonePreference {
  id              String   @id @default(cuid())
  campaignId      String
  milestoneTypeId String
  emailEnabled    Boolean  @default(true)
  whatsappEnabled Boolean  @default(true)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  campaign        Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  milestoneType   MilestoneType @relation(fields: [milestoneTypeId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, milestoneTypeId])
}

model SentMilestone {
  id              String   @id @default(cuid())
  campaignId      String
  milestoneTypeId String
  keywordId       String?  // Optional: specific keyword that achieved the milestone
  achievedAt      DateTime // When the milestone was actually achieved
  sentAt          DateTime @default(now()) // When the notification was sent
  emailSent       Boolean  @default(false)
  whatsappSent    Boolean  @default(false)
  emailError      String?  @db.Text
  whatsappError   String?  @db.Text
  metricValue     Float?   // The actual position or click count achieved
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  campaign        Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  milestoneType   MilestoneType @relation(fields: [milestoneTypeId], references: [id], onDelete: Cascade)
  keyword         SearchConsoleKeyword? @relation(fields: [keywordId], references: [id], onDelete: SetNull)
  
  @@index([campaignId, milestoneTypeId])
  @@index([achievedAt])
}

// User-Campaign email notification preferences
model UserCampaignEmailPreference {
  id          String   @id @default(cuid())
  userId      String
  campaignId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([userId, campaignId])
}

// Admin global notification preferences
model AdminNotificationPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique // Admin user ID
  enableEmail           Boolean  @default(true)
  enableWhatsApp        Boolean  @default(true)
  enableAllNotifications Boolean @default(true)
  
  // Selected preferences
  whatsAppGroupId       String?  // Selected WhatsApp group ID
  campaignId            String?  // Selected campaign ID for email notifications
  
  // Global thresholds (JSON stored as string)
  positionThresholds    String?  @db.Text // JSON: [1, 2, 3]
  clickThresholds       String?  @db.Text // JSON: [100, 500, 1000]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Individual user notification preferences
model UserNotificationPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique // User ID
  enableEmail           Boolean  @default(true)
  enableWhatsApp        Boolean  @default(true)
  enableAllNotifications Boolean @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}